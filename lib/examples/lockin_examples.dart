// Example usage of LockInService
// This file shows how to use the LockInService for common operations

import 'package:flutter/material.dart';
import '../models/lockin.dart';
import '../services/lockin_service.dart';

class LockInExamples {
  final LockInService _lockInService = LockInService();

  // Example: Create a new LockIn
  Future<void> createDailyWorkoutLockIn(String userId) async {
    final lockIn = LockIn(
      id: '', // Will be generated by Firestore
      userId: userId,
      title: 'Daily Workout',
      description: 'Complete a 30-minute workout session',
      frequency: 'daily',
      reminderTime: '07:00',
      createdAt: DateTime.now(),
    );

    try {
      final lockInId = await _lockInService.createLockIn(lockIn);
      print('Created LockIn with ID: $lockInId');
    } catch (e) {
      print('Error creating LockIn: $e');
    }
  }

  // Example: Create instances for a LockIn
  Future<void> createWorkoutInstances(String lockInId) async {
    final today = DateTime.now();
    
    // Create instances for the next 7 days
    for (int i = 0; i < 7; i++) {
      final scheduledDate = today.add(Duration(days: i));
      final scheduledDateTime = DateTime(
        scheduledDate.year,
        scheduledDate.month,
        scheduledDate.day,
        7, 0, // 7:00 AM
      );

      final instance = LockInInstance(
        id: '', // Will be generated by Firestore
        scheduledFor: scheduledDateTime,
        completedAt: null,
        mediaUrl: null,
        status: 'pending',
      );

      try {
        final instanceId = await _lockInService.createLockInInstance(lockInId, instance);
        print('Created instance with ID: $instanceId for day ${i + 1}');
      } catch (e) {
        print('Error creating instance: $e');
      }
    }
  }

  // Example: Widget to display user's LockIns
  Widget buildLockInsListWidget(String userId) {
    return StreamBuilder<List<LockIn>>(
      stream: _lockInService.getUserLockIns(userId),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }

        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        final lockIns = snapshot.data ?? [];

        if (lockIns.isEmpty) {
          return const Text('No LockIns found');
        }

        return ListView.builder(
          itemCount: lockIns.length,
          itemBuilder: (context, index) {
            final lockIn = lockIns[index];
            return ListTile(
              title: Text(lockIn.title),
              subtitle: Text(lockIn.description),
              trailing: Text(lockIn.frequency),
              onTap: () {
                // Navigate to LockIn details
                print('Tapped on LockIn: ${lockIn.title}');
              },
            );
          },
        );
      },
    );
  }

  // Example: Widget to display instances for a specific LockIn
  Widget buildInstancesListWidget(String lockInId) {
    return StreamBuilder<List<LockInInstance>>(
      stream: _lockInService.getLockInInstances(lockInId),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        }

        if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        final instances = snapshot.data ?? [];

        if (instances.isEmpty) {
          return const Text('No instances found');
        }

        return ListView.builder(
          itemCount: instances.length,
          itemBuilder: (context, index) {
            final instance = instances[index];
            return ListTile(
              title: Text('Scheduled: ${instance.scheduledFor.toString()}'),
              subtitle: Text('Status: ${instance.status}'),
              trailing: instance.status == 'pending'
                  ? ElevatedButton(
                      onPressed: () async {
                        // Mark as completed
                        await _lockInService.completeLockInInstance(
                          lockInId,
                          instance.id,
                        );
                      },
                      child: const Text('Complete'),
                    )
                  : Icon(
                      instance.status == 'completed'
                          ? Icons.check_circle
                          : Icons.cancel,
                      color: instance.status == 'completed'
                          ? Colors.green
                          : Colors.red,
                    ),
            );
          },
        );
      },
    );
  }

  // Example: Get today's instances across all LockIns
  Future<void> showTodaysInstances(String userId) async {
    try {
      _lockInService.getTodaysInstances(userId).listen((instances) {
        print('Today\'s instances:');
        for (final item in instances) {
          final lockIn = item['lockIn'] as LockIn;
          final instance = item['instance'] as LockInInstance;
          print('- ${lockIn.title}: ${instance.status} at ${instance.scheduledFor}');
        }
      });
    } catch (e) {
      print('Error getting today\'s instances: $e');
    }
  }

  // Example: Complete a LockIn instance with media
  Future<void> completeInstanceWithPhoto(String lockInId, String instanceId, String photoUrl) async {
    try {
      await _lockInService.completeLockInInstance(
        lockInId,
        instanceId,
        mediaUrl: photoUrl,
      );
      print('Instance completed with photo!');
    } catch (e) {
      print('Error completing instance: $e');
    }
  }
}
